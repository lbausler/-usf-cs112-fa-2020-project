import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;

public class Graph extends JPanel {
	

    private static final long serialVersionUID = 1L;
    private int labelPadding = 40;
    private Color lineColor = new Color(255, 255, 254);

    // TODO: Add point colors for each type of data point
    private Color pointColor = new Color(255, 0, 255);
    private Color blue = new Color(0, 0, 255);
    private Color cyan = new Color(0, 255, 255);
    private Color yellow = new Color(255, 255, 0);
    private Color red = new Color(255, 0, 0);

    private Color gridColor = new Color(200, 200, 200, 200);
    private static final Stroke GRAPH_STROKE = new BasicStroke(2f);

    // TODO: Change point width as needed
    private static int pointWidth = 10;

    // Number of grids and the padding width
    private int numXGridLines = 6;
    private int numYGridLines = 6;
    private int padding = 40;

    private static ArrayList<DataPoint> data;

    // TODO: Add a private KNNModel variable
    	private static KNNModel Kmodel;
    	public int truePos;
    	public int trueNeg;
    	public int falsePos;
    	public int falseNeg;
	/**
	 * Constructor method
	 */
    public Graph(List<DataPoint> testData, List<DataPoint> trainData) {
        this.data = (ArrayList<DataPoint>) testData;
        // TODO: instantiate a KNNModel variable
        Kmodel = new KNNModel(5);
        // TODO: Run train with the trainData
        Kmodel.train((ArrayList<DataPoint>) trainData);
        truePos=0;
        trueNeg=0;
        falsePos=0;
        falseNeg=0;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        double minF1 = getMinF1Data();
        double maxF1 = getMaxF1Data();
        double minF2 = getMinF2Data();
        double maxF2 = getMaxF2Data();

        g2.setColor(Color.WHITE);
        g2.fillRect(padding + labelPadding, padding, getWidth() - (2 * padding) - 
        		labelPadding, getHeight() - 2 * padding - labelPadding);
        g2.setColor(Color.BLUE);

        double yGridRatio = (maxF2 - minF2) / numYGridLines;
        for (int i = 0; i < numYGridLines + 1; i++) {
            int x0 = padding + labelPadding;
            int x1 = pointWidth + padding + labelPadding;
            int y0 = getHeight() - ((i * (getHeight() - padding * 2 -
            		labelPadding)) / numYGridLines + padding + labelPadding);
            int y1 = y0;
            if (data.size() > 0) {
                g2.setColor(gridColor);
                g2.drawLine(padding + labelPadding + 1 + pointWidth, y0, getWidth() - padding, y1);
                g2.setColor(Color.BLACK);
                String yLabel = String.format("%.2f", (minF2 + (i * yGridRatio)));
                FontMetrics metrics = g2.getFontMetrics();
                int labelWidth = metrics.stringWidth(yLabel);
                g2.drawString(yLabel, x0 - labelWidth - 6, y0 + (metrics.getHeight() / 2) - 3);
            }
            g2.drawLine(x0, y0, x1, y1);
        }

        double xGridRatio = (maxF1 - minF1) / numXGridLines;
        for (int i = 0; i < numXGridLines + 1; i++) {
            int y0 = getHeight() - padding - labelPadding;
            int y1 = y0 - pointWidth;
            int x0 = i * (getWidth() - padding * 2 - labelPadding) / (numXGridLines) + padding + labelPadding;
            int x1 = x0;
            if (data.size() > 0) {
                g2.setColor(gridColor);
                g2.drawLine(x0, getHeight() - padding - labelPadding - 1 - pointWidth, x1, padding);
                g2.setColor(Color.BLACK);
                String xLabel = String.format("%.2f", (minF1 + (i * xGridRatio)));
                FontMetrics metrics = g2.getFontMetrics();
                int labelWidth = metrics.stringWidth(xLabel);
                g2.drawString(xLabel, x0 - labelWidth / 2, y0 + metrics.getHeight() + 3);
            }
            g2.drawLine(x0, y0, x1, y1);
        }

        // Draw the main axis
        g2.drawLine(padding + labelPadding, getHeight() - padding - labelPadding, padding + labelPadding, padding);
        g2.drawLine(padding + labelPadding, getHeight() - padding - labelPadding, getWidth() -
        		padding, getHeight() - padding - labelPadding);

        // Draw the points
        paintPoints(g2, minF1, maxF1, minF2, maxF2);
    }

    private void paintPoints(Graphics2D g2, double minF1, double maxF1, double minF2, double maxF2) {
        Stroke oldStroke = g2.getStroke();
        g2.setColor(lineColor);
        g2.setStroke(GRAPH_STROKE);
        double xScale = ((double) getWidth() - (3 * padding) - labelPadding) /(maxF1 - minF1);
        double yScale = ((double) getHeight() - 2 * padding - labelPadding) / (maxF2 - minF2);
        g2.setStroke(oldStroke);
        for (int i = 0; i < data.size(); i++) {
            int x1 = (int) ((data.get(i).getF1() - minF1) * xScale + padding + labelPadding);
            int y1 = (int) ((maxF2 - data.get(i).getF2()) * yScale + padding);
            int x = x1 - pointWidth / 2;
            int y = y1 - pointWidth / 2;
            int ovalW = pointWidth;
            int ovalH = pointWidth;

            // TODO: Depending on the type of data and how it is tested, change color here.
            // You need to test your data here using the model to obtain the test value 
            // and compare against the true label.
            
            System.out.println(data.get(i).toString());
            String str = Kmodel.test(data.get(i));
            
            System.out.println("STR " + str);
            
            DataPoint pt = data.get(i);       
            if(pt.getLabel().equals("1")&&str.equals("1")) {
		    	 truePos++;
		    	 g2.setColor(blue);
		    	 g2.fillOval(x, y, ovalW, ovalH);
		      }
            
            else if(pt.getLabel().equals("1")&&str.equals("0")) {
		    	 falsePos++;	
		    	 g2.setColor(cyan);
		    	 g2.fillOval(x, y, ovalW, ovalH);
		      }
			 
            else if(pt.getLabel().equals("0")&&str.equals("1")) {
		    	falseNeg++;  
		    	g2.setColor(yellow);
		    	g2.fillOval(x, y, ovalW, ovalH);
		      }
            else if(pt.getLabel().equals("0")&&str.equals("0")) {
		    	trueNeg++;
		    	g2.setColor(red);
		    	g2.fillOval(x, y, ovalW, ovalH);
		      }
            else {
            	 g2.setColor(pointColor);
            	 g2.fillOval(x, y, ovalW, ovalH);
            }
           
            
            
            
        }

    }

    /*
     * @Return the min values
     */
    private double getMinF1Data() {
        double minData = Double.MAX_VALUE;
        for (DataPoint pt : this.data) {
            minData = Math.min(minData, pt.getF1());
        }
        return minData;
    }

    private double getMinF2Data() {
        double minData = Double.MAX_VALUE;
        for (DataPoint pt : this.data) {
            minData = Math.min(minData, pt.getF2());
        }
        return minData;
    }


    /*
     * @Return the max values;
     */
    private double getMaxF1Data() {
        double maxData = Double.MIN_VALUE;
        for (DataPoint pt : this.data) {
            maxData = Math.max(maxData, pt.getF1());
        }
        return maxData;
    }

    private double getMaxF2Data() {
        double maxData = Double.MIN_VALUE;
        for (DataPoint pt : this.data) {
            maxData = Math.max(maxData, pt.getF2());
        }
        return maxData;
    }

    /* Mutator */
    public void setData(List<DataPoint> data) {
        this.data = (ArrayList<DataPoint>) data;
        invalidate();
        this.repaint();
    }

    /* Accessor */
    public List<DataPoint> getData() {
        return data;
    }

    /*  Run createAndShowGui in the main method, where we create the frame too and pack it in the panel*/
    private static void createAndShowGui(List<DataPoint> testData, List<DataPoint> trainData) {


	    /* Main panel */
        Graph mainPanel = new Graph(testData, trainData);

        // Feel free to change the size of the panel
        mainPanel.setPreferredSize(new Dimension(700, 600));

        /* creating the frame */
        JFrame frame = new JFrame("CS 112 Lab Part 3");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(mainPanel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        //frame.setUndecorated(true);

        
      //adding Jlabel
       
        
        //JPanel main = new JPanel();

        JLabel Lab4 = new JLabel();
        Lab4.setText("Choose the majority value");
        Lab4.setLocation(0, 0);
      
        frame.getContentPane().add(Lab4);
        //mainPanel.add(frame);
      // adding slider
    
        
        DefaultBoundedRangeModel model = new DefaultBoundedRangeModel(5, 0, 2, 25);
        JSlider slider = new JSlider(model);
        slider.setMajorTickSpacing(5);
        slider.setMinorTickSpacing(1);
        slider.setPaintTicks(true);
        slider.setSnapToTicks(true);
        slider.setPaintLabels(true);
        
        	// Add positions label in the slider
        Hashtable position = new Hashtable();
        position.put(5, new JLabel("5"));
        position.put(10, new JLabel("10"));
        position.put(20, new JLabel("20"));
        position.put(25, new JLabel("25"));
        		
        	// Set the label to be drawn
        slider.setLabelTable(position); 
        mainPanel.add(slider);
        frame.add(mainPanel);
		frame.pack();
		frame.setVisible(true);
        
        
        // add button "Run Test"
		
        ArrayList<JButton> arr = new ArrayList<>();
        
        JButton run = new JButton();
		run.setText("Run Test");
		
		mainPanel.add(run);    
		//adding to frame
        System.out.print(run.getText() + " ");
        run.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                 
            	int val = slider.getValue();
            	int oddVal = (val * 2) + 1;
            	
            	KNNModel Kmodel = new KNNModel(oddVal);
            	//Kmodel.setK(oddVal);
            	Kmodel.test(data);
            	
        		
                  
            }
         });
        
        
        
        
        JFrame acc = new JFrame("Accuracy and Precision");
        acc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        /*acc.getContentPane().add(mainPanel);
        acc.pack();
        acc.setLocationRelativeTo(null);
        acc.setVisible(true);*/
        
        Container contentPane = acc.getContentPane();

    	    contentPane.setLayout(new GridLayout(5,5));

    	   // double accuracy = (mainPanel.truePos + mainPanel.trueNeg) / (mainPanel.truePos +mainPanel.trueNeg + mainPanel.falsePos + mainPanel.falseNeg);
    	   // double precision = (mainPanel.truePos/(mainPanel.truePos + mainPanel.falseNeg));
    	   // contentPane.add(new JButton("Accuracy " + accuracy));
    	   // contentPane.add(new JButton("Precision " + precision));


    	    acc.pack();
    		acc.setVisible(true);
    }
    
    public static void drive() {

    	 Random rand = new Random(); // creating Random object
    	 
    	 ArrayList<DataPoint> data = new ArrayList<>();
    	 ArrayList<DataPoint> train = new ArrayList<>();
    	 ArrayList<DataPoint> test = new ArrayList<>();
    	 
         try (Scanner scanner = new Scanner(new File("C:\\Users\\lbaus\\OneDrive\\Desktop\\CS112\\usf-cs112-fa-2020-project\\MLLibrary\\titanic.csv"));) {
       	  while (scanner.hasNextLine()) {
   	    	  List<String> records = getRecordFromLine(scanner.nextLine());
   	    	  
   	    	  try {
   		    	  String label = records.get(1);
   		    	  double age = Double.valueOf(records.get(records.size()-2));
   		    	  double fare = Double.valueOf(records.get(records.size()-1));
   		    	  
   		    	  double randNum = rand.nextDouble();
   		    	  
   		    	  DataPoint dp;
   		    	  if (randNum < 0.9) {
   		    		// Set the type of DataPoint as “train” and put into the Collection
   		    		  dp = new DataPoint(age,fare,label,"train");
   		    		  train.add(dp);
   	    		  } else {
   	    			// Set the type of DataPoint as “test” and put into the Collection
   	    			  dp = new DataPoint(age,fare,label,"test");
   	    			  test.add(dp);
   		    	  }
   		    	  data.add(dp);
   	    	  }
   	    	  catch(NumberFormatException e) {
   	    		  System.out.println("empty string error");
   	    	  }
       	  }
   	  } catch (FileNotFoundException e) {
   		  System.out.println("File not found exception reached");
   		  return;
   	}
         
         
        // TODO: Change the above logic retrieve the data from titanic.csv
        // Split the data to test and training
        
        // TODO: Pass in the testData and trainData separately 
        // Be careful with the order of the variables.
        createAndShowGui(test, train);
        
    }
    
      
    /* The main method runs createAndShowGui*/
    public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
           /* // Generate random data point
            List<DataPoint> data = new ArrayList<>();
            Random random = new Random();
            int maxDataPoints = 20;
            // Max value of f1 and f2 that is arbitrarily set
            int maxF1 = 8;
            int maxF2 = 300;

            // Generates random DataPoints
            for (int i = 0; i < maxDataPoints; i++) {
                double f1 = (random.nextDouble() * maxF1);
                double f2 = (random.nextDouble() * maxF2);
                data.add(new DataPoint(f1, f2, "Random", "Random"));
            }*/
        	 drive();
        	 /*Random rand = new Random(); // creating Random object
        	 
        	 ArrayList<DataPoint> data = new ArrayList<>();
        	 ArrayList<DataPoint> train = new ArrayList<>();
        	 ArrayList<DataPoint> test = new ArrayList<>();
        	 
             try (Scanner scanner = new Scanner(new File("C:\\Users\\lbaus\\OneDrive\\Desktop\\CS112\\usf-cs112-fa-2020-project\\MLLibrary\\titanic.csv"));) {
           	  while (scanner.hasNextLine()) {
       	    	  List<String> records = getRecordFromLine(scanner.nextLine());
       	    	  
       	    	  try {
       		    	  String label = records.get(1);
       		    	  double age = Double.valueOf(records.get(records.size()-2));
       		    	  double fare = Double.valueOf(records.get(records.size()-1));
       		    	  
       		    	  double randNum = rand.nextDouble();
       		    	  
       		    	  DataPoint dp;
       		    	  if (randNum < 0.9) {
       		    		// Set the type of DataPoint as “train” and put into the Collection
       		    		  dp = new DataPoint(age,fare,label,"train");
       		    		  train.add(dp);
       	    		  } else {
       	    			// Set the type of DataPoint as “test” and put into the Collection
       	    			  dp = new DataPoint(age,fare,label,"test");
       	    			  test.add(dp);
       		    	  }
       		    	  data.add(dp);
       	    	  }
       	    	  catch(NumberFormatException e) {
       	    		  System.out.println("empty string error");
       	    	  }
           	  }
       	  } catch (FileNotFoundException e) {
       		  System.out.println("File not found exception reached");
       		  return;
       	}
             
             
            // TODO: Change the above logic retrieve the data from titanic.csv
            // Split the data to test and training
            
            // TODO: Pass in the testData and trainData separately 
            // Be careful with the order of the variables.
            createAndShowGui(test, train);
            */
            
            
            
            
            
         }
      });
    }
		private static List<String> getRecordFromLine(String line) {
				
				List<String> values = new ArrayList<String>();
				
				try (Scanner rowScanner = new Scanner(line)) {
					rowScanner.useDelimiter(",");
					//iterator
					while (rowScanner.hasNext()) {
						values.add(rowScanner.next());
					}
				}
				return values;
	
		
	}
		
}
